#!/bin/bash

source "$HOME/.config/hypr/start_scripts/scripts/functions"

# Rutas a los archivos de color que se crearan
THEMES="/home/rafa/.config/colors"
CSS_THEME="/home/rafa/.config/hypr/waybar/colors.css"
ROFI_THEME="/home/rafa/.config/rofi/color.rasi"

# Creamos un mapa para manajar la informacion del json como key, value y las key las almacenasmos en el orden leido
keys=()

# ----------------------------------------------------- 
# Mapeos para swaylock
# -----------------------------------------------------
sway_file="$HOME/.config/swaylock/config"
properties=("color" "inside-color" "inside-clear-color" "inside-ver-color" "inside-wrong-color" 
            "key-hl-color" "bs-hl-color" "separator-color" "line-color" "text-color" 
            "text-clear-color" "text-caps-lock-color" "text-ver-color" "text-wrong-color" 
            "ring-color" "ring-ver-color" "ring-clear-color" "ring-wrong-color")

declare -A map_properties_theme=(
  ["color"]="bg"
  ["inside-color"]="bg"
  ["inside-clear-color"]="bg"
  ["inside-ver-color"]="bg"
  ["inside-wrong-color"]="bg"
  ["line-color"]="bg"
  ["key-hl-color"]="focus"
  ["bs-hl-color"]="focus"
  ["separator-color"]="inactive"
  ["text-color"]="active"
  ["text-clear-color"]="red1"
  ["text-caps-lock-color"]="yellow"
  ["text-ver-color"]="focus"
  ["text-wrong-color"]="red2"
  ["ring-color"]="bg"
  ["ring-ver-color"]="green1"
  ["ring-clear-color"]="red1"
  ["ring-wrong-color"]="red2"
)

# ----------------------------------------------------- 
# Mapeos para mako
# -----------------------------------------------------
mako_file="$HOME/.config/mako/config"
mako_keys=("background-color" "border-color" "[urgency=low]" "[urgency=normal]" "[urgency=high]")
declare -A mako_map=(
  ["background-color"]="bg"
  ["border-color"]="focus"
  ["[urgency=low]"]="bg"
  ["[urgency=normal]"]="focus"
  ["[urgency=high]"]="red2"
)

# ----------------------------------------------------- 
# Función para borrar temas en un archivo determinado
# ----------------------------------------------------- 
clear_file_theme() {
  # Verifica que se hayan pasado los parámetros necesarios
  if [[ $# -ne 2 ]]; then
    handle_error "Uso: clear_file_theme <archivo> <palabra_clave>"
  fi

  local temp_file=$(mktemp) || { handle_error "Error al crear archivo temporal"; }
  local file="$1"
  local word_break="$2"

  # Verifica si el archivo existe
  if [[ ! -f "$file" ]]; then
    handle_error "El archivo '$file' no existe."
  fi

  while IFS= read -r line; do
    echo "$line" >> "$temp_file"

    if [[ "$line" == *"$word_break"* ]]; then
      break
    fi
  done < $file

  mv "$temp_file" "$file"
}

# ----------------------------------------------------- 
# Función para convertir hex a rgba
# ----------------------------------------------------- 
transparencia="0.8"
if [[ -n "$2" ]]; then
  transparencia="$2"
fi

hex_to_rgba() {
  local hex=${1#"#"} # Eliminar el símbolo #
  
  [[ ${#hex} -eq 3 ]] && hex="${hex:0:1}${hex:0:1}${hex:1:1}${hex:1:1}${hex:2:1}${hex:2:1}" # Expandir de 3 a 6 caracteres

  local r=$((16#${hex:0:2}))
  local g=$((16#${hex:2:2}))
  local b=$((16#${hex:4:2}))

  echo "rgba($r, $g, $b, $transparencia)"
}

# ----------------------------------------------------- 
# Funciones para formatear archivos
# ----------------------------------------------------- 
css_format() {

  echo "@define-color $1 ${json_content["$1"]};" >> "$CSS_THEME"
}

rofi_format() {
  if [[ "$1" == "bg" ]]; then
    # Al background le damos una transparencia de fondo
    echo "$1: ${json_content["$1"]}BF;" >> $ROFI_THEME
    return
  elif [[ "$1" == "bar-op-bg" ]]; then 
    # No incluimos el valor en rgba en el archivo 
    return
  fi
  
  echo "$1: ${json_content["$1"]}FF;" >> $ROFI_THEME
}

# ----------------------------------------------------- 
# Configuración para swaylock
# ----------------------------------------------------- 
set_sway_content() {
  local content=""

  for propertie in ${properties[@]}; do
    local c="${json_content["${map_properties_theme["$propertie"]}"]}"

    case "$propertie" in
      key-hl-color|bs-hl-color) c+="aa";;
      separator-color|ring-color) c+="55";;
      ring-clear-color) c+="11";;
    esac

    content+="$propertie=$c"$'\n'
  done

  # clear_sway_theme 
  clear_file_theme "$sway_file" "clock"
  echo -e "$content" >> "$sway_file"
}

# ----------------------------------------------------- 
# Configuración para mako
# ----------------------------------------------------- 
create_mako_content() {
  # Lo primero borrar el contenido anterior para actualizarlo
  clear_file_theme "$mako_file" "font=VictorMono NF Italic 12"

  for m_proper in ${mako_keys[@]}; do
    local line="" # Contruimos cada una de las lineas que usamremos

    if [[ $m_proper == "[urgency=low]" || $m_proper == "[urgency=normal]" || $m_proper == "[urgency=high]" ]]; then
      line+="$m_proper"$'\n'
      line+="border-color=${json_content["${mako_map["$m_proper"]}"]}"
      printf "%s\n" "$line" >> $mako_file
      continue
    fi

    line+="$m_proper=${json_content["${mako_map["$m_proper"]}"]}"
    printf "%s\n" "$line" >> $mako_file
  done

  makoctl reload  # Hacemos que mako se reinicie y se actualicen los cambios
}

# ----------------------------------------------------- 
# Configuración para kitty
# ----------------------------------------------------- 
reload_all_kitty_instance() {
  local socket_dir="/tmp"

  for socket in "$socket_dir"/mykitty-*; do
    if [ -S "$socket" ]; then
      socket_number=$(basename "$socket" | sed 's/mykitty-//')
      if ! kitty @ --to unix:"$socket" load-config; then
        continue
      fi
    fi
  done
}

create_kitty_theme() {
  # Ruta al archivo JSON de colores
  local COLOR_JSON="$THEMES/$1.json"

  # Ruta al archivo de configuración de Kitty
  KITTY_CONFI_THEME="$HOME/.config/kitty/theme.conf"

  # Limpiar el archivo de configuración existente
  > "$KITTY_CONFI_THEME"

  # Leer colores del archivo JSON y escribir en el archivo de configuración de Kitty
  {
    # Configuración básica
    echo "background_opacity $transparencia"
    echo "cursor ${json_content["focus"]}"
    echo "foreground ${json_content["active"]}"
    echo "background ${json_content["kitty-bg"]}"

    echo "active_tab_foreground ${json_content["bg"]}"
    echo "active_tab_background ${json_content["focus"]}"
    echo "active_tab_font_style italic"
    echo "active_border_color ${json_content["focus"]}"

    echo "inactive_tab_foreground ${json_content["inactive-tab-fg"]}"
    echo "inactive_tab_background ${json_content["inactive-tab-bg"]}"
    echo "inactive_tab_font_style normal"
    echo "inactive_border_color ${json_content["inactive-tab-bg"]}"

    echo "tab_bar_background ${json_content["bar-bg"]}"

    # Colores adicionales
    echo "#: black"
    echo "color0 ${json_content["black1"]}"
    echo "color8 ${json_content["black2"]}"

    echo "#: red"
    echo "color1 ${json_content["red3"]}"
    echo "color9 ${json_content["red4"]}"

    echo "#: green"
    echo "color2 ${json_content["green3"]}"
    echo "color10 ${json_content["green4"]}"

    echo "#: yellow"
    echo "color3 ${json_content["yellow"]}"
    echo "color11 ${json_content["yellow1"]}"

    echo "#: blue"
    echo "color4 ${json_content["blue3"]}"
    echo "color12 ${json_content["blue4"]}"

    echo "#: magenta"
    echo "color5 ${json_content["magneta1"]}"
    echo "color13 ${json_content["magneta2"]}"

    echo "#: cyan"
    echo "color6 ${json_content["cyan1"]}"
    echo "color14 ${json_content["cyan2"]}"

    echo "#: white"
    echo "color7 ${json_content["white1"]}"
    echo "color15 ${json_content["white2"]}"

  } >> "$KITTY_CONFI_THEME"

  reload_all_kitty_instance
  echo "Archivo de configuración para Kitty generado en $KITTY_CONFI_THEME."
}
# ----------------------------------------------------- 
# Crear archivos de tema
# ----------------------------------------------------- 
create_file_theme() {
  > "$CSS_THEME" # Limpiar el archivo css para llenarlo todo de nuevo
  echo "* {" > $ROFI_THEME

  for clave in "${keys[@]}"; do
    css_format $clave
    rofi_format $clave
  done

  echo "}" >> $ROFI_THEME
}

json_content=()
read_json "$THEMES/$1.json"

create_file_theme # Creamos tanto el archivo css como el de rofi
set_sway_content  # Modificamos el archivo para swaylock
create_mako_content # Modificamos el archivo de mako para establecer el nuevo tema
create_kitty_theme # Modificamos el archivo de colores de kitty para establecer el nuevo tema
